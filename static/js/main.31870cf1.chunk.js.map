{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["currencyData","id","curr","App","useState","selCurrencies","setSelCurrencies","onCurrencySelect","selCurrency","find","item","filter","x","className","map","onClick","htmlFor","type","checked","currency","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAQMA,G,MACJ,CACE,CAAEC,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,EAAGC,KAAM,SA2DJC,EAxDH,WAAO,IAAD,EAE0BC,mBAAqB,IAF/C,mBAETC,EAFS,KAEMC,EAFN,KAIVC,EAAmB,SAAC,GAA4B,IAA1BN,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,KACxBM,EAAcH,EACjBI,MAAK,SAAAC,GAAI,OAAIA,EAAKT,KAAOA,KAE1BK,EADEE,EACeH,EAAcM,QAAO,SAAAC,GAAC,OAAIA,EAAEX,KAAOO,EAAYP,MAE/C,GAAD,mBAAKI,GAAL,CAAoB,CAAEJ,KAAIC,YAM9C,OACE,qBAAKW,UAAU,YAAf,SACE,sBAAKA,UAAU,aAAf,UACGR,EAAcS,KAAI,SAAAJ,GAAI,OACrB,sBACEG,UAAU,cACVE,QAAS,kBAAMR,EAAiBG,IAFlC,UAIGA,EAAKR,KACN,sBAAMW,UAAU,WAAhB,qBAIJ,qBAAKA,UAAU,YAAf,SACGb,EAAac,KAAI,SAACJ,GACjB,OACE,mCACE,wBACEG,UAAU,OACVG,QAAO,cAASN,EAAKT,IAFvB,UAIE,uBACEgB,KAAK,WACLJ,UAAU,WACVZ,GAAE,cAASS,EAAKT,IAChBc,QAAS,kBAAMR,EAAiBG,IAChCQ,SA5BSC,EA4BkBT,OA5BiDU,GAAjDf,EAAcI,MAAK,SAAAG,GAAC,OAAIA,EAAEX,KAAOkB,EAASlB,SA+BtES,EAAKR,UA/BI,IAACiB,aCrBdE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.31870cf1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\ntype Currency = {\n  id: number,\n  curr: string\n}\n\nconst currencyData =\n  [\n    { id: 1, curr: 'EUR' },\n    { id: 2, curr: 'PLN' },\n    { id: 3, curr: 'GEL' },\n    { id: 4, curr: 'DKK' },\n    { id: 5, curr: 'CZK' },\n    { id: 6, curr: 'GBP' },\n    { id: 7, curr: 'SEK' },\n    { id: 8, curr: 'USD' },\n    { id: 9, curr: 'RUB' }\n  ]\n\nconst App = () => {\n\n  const [selCurrencies, setSelCurrencies] = useState<Currency[]>([]);\n\n  const onCurrencySelect = ({ id, curr }: Currency) => {\n    const selCurrency = selCurrencies\n      .find(item => item.id === id);\n    if (selCurrency) {\n      setSelCurrencies(selCurrencies.filter(x => x.id !== selCurrency.id))\n    } else {\n      setSelCurrencies([...selCurrencies, { id, curr }])\n    }\n  };\n\n  const isCurrencyChecked = (currency: any) => selCurrencies.find(x => x.id === currency.id) != undefined;\n\n  return (\n    <div className=\"container\">\n      <div className=\"curr-block\">\n        {selCurrencies.map(item =>\n          <div\n            className=\"curr-select\"\n            onClick={() => onCurrencySelect(item)}\n          >\n            {item.curr}\n            <span className=\"circle-x\">\n              X\n            </span>\n          </div>)}\n        <div className=\"cell-wrap\">\n          {currencyData.map((item) => {\n            return (\n              <>\n                <label\n                  className=\"cell\"\n                  htmlFor={`sel-${item.id}`}\n                >\n                  <input\n                    type=\"checkbox\"\n                    className=\"sel-curr\"\n                    id={`sel-${item.id}`}\n                    onClick={() => onCurrencySelect(item)}\n                    checked={isCurrencyChecked(item)}\n                  >\n                  </input>\n                  {item.curr}\n                </label>\n              </>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}